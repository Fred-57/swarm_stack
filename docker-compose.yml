version: '3.8'

services:
  user-service:
    build: ./user-service
    container_name: user-service
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-$(cat /run/secrets/postgres_user)}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-$(cat /run/secrets/postgres_password)}
      POSTGRES_DB: user_db
    secrets:
      - postgres_user
      - postgres_password
    restart: always
    networks:
      - todo-network
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/users"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 10s

  task-service:
    build: ./task-service
    container_name: task-service
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/tasks"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 10s

  web-frontend:
    build: ./web-frontend
    container_name: web-frontend
    ports:
      - "${WEB_PORT}:80"
    depends_on:
      - user-service
      - task-service
    networks:
      - todo-network
    deploy:
      mode: global
      replicas: 3
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 2
        delay: 10s

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER_FILE: /run/secrets/postgres_user
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: user_db
    secrets:
      - postgres_user
      - postgres_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      replicas: 1
      placement:
        constraints:
        - node.role == manager
      update_config:
        parallelism: 1
        delay: 10s
secrets:
  postgres_user:
    file: ./secrets/postgres_user
  postgres_password:
    file: ./secrets/postgres_password

networks:
  todo-network:
    driver: bridge

volumes:
  postgres-data:

